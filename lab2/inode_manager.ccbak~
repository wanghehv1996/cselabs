#include "inode_manager.h"
#include "assert.h"

// disk layer -----------------------------------------

disk::disk()
{
  bzero(blocks, sizeof(blocks));
}

void
disk::read_block(blockid_t id, char *buf)
{
  /*
   *your lab1 code goes here.
   *if id is smaller than 0 or larger than BLOCK_NUM
   *or buf is null, just return.
   *put the content of target block into buf.
   *hint: use memcpy
  */
  //assert(buf!=NULL);
  //assert(id>=0);
  //assert(id<=BLOCK_SIZE);
  if(buf==NULL||id<0||id>=BLOCK_NUM)
    return;
  memcpy(buf, blocks[id], BLOCK_SIZE);
}

void
disk::write_block(blockid_t id, const char *buf)
{
  /*
   *your lab1 code goes here.
   *hint: just like read_block
  */
  //assert(buf!=NULL);
  //assert(id>=0);
  //assert(id<=BLOCK_SIZE);
  if(buf==NULL||id<0||id>=BLOCK_NUM)
    return;
  //printf("write_block:%d %s\n",id,buf);
  memcpy(blocks[id], buf, BLOCK_SIZE);
}

// block layer -----------------------------------------

// Allocate a free disk block.
blockid_t
block_manager::alloc_block()
{
  /*
   * your lab1 code goes here.
   * note: you should mark the corresponding bit in block bitmap when alloc.
   * you need to think about which block you can start to be allocated.

   *hint: use macro IBLOCK and BBLOCK.
          use bit operation.
          remind yourself of the layout of disk.
   */
   uint32_t ninodes = sb.ninodes;
   uint32_t nblocks = sb.nblocks;
   blockid_t fileBlockId_first = IBLOCK(ninodes, nblocks);
   //printf("fileblock first = %d\n",fileBlockId_first);

   //try to find free block
   for(blockid_t blockId = fileBlockId_first;blockId<BLOCK_NUM;blockId++){
     std::map <uint32_t, int> ::iterator it;
     it=using_blocks.find(blockId);
     //if find the free block
     if(it==using_blocks.end()){
       //printf("get free block = %d\n",blockId);
       //edit using_blocks
       using_blocks.insert(std::pair<uint32_t, int>(blockId,1));
       //get the block of bitmap
       blockid_t bmId = BBLOCK(blockId);
       uint32_t bmCharOffset = (blockId%BPB)/8;
       int bmBitOffset = (blockId%BPB)%8;
       char *blockStr = (char *)malloc(BLOCK_SIZE);
       read_block(bmId,blockStr);
       char ch = blockStr[bmCharOffset];
       char hch = (char)(1<<(7-bmBitOffset));
       blockStr[bmCharOffset] = ch|hch;

       write_block(bmId,blockStr);
       delete[] blockStr;
       return blockId;

     }
   }

  return 0;
}

void
block_manager::free_block(uint32_t id)
{
  /*
   * your lab1 code goes here.
   * note: you should unmark the corresponding bit in the block bitmap when free.
   */
   uint32_t ninodes = sb.ninodes;
   uint32_t nblocks = sb.nblocks;

   std::map <uint32_t, int> ::iterator it;
   it=using_blocks.find(id);
   //if find the free block
   if(it!=using_blocks.end()){
     using_blocks.erase(id);
       //get the block of bitmap
       blockid_t bmId = BBLOCK(id);
       uint32_t bmCharOffset = (id%BPB)/8;
       int bmBitOffset = (id%BPB)%8;
       char *blockStr = (char *)malloc(BLOCK_SIZE);
       read_block(bmId,blockStr);
       char ch = blockStr[bmCharOffset];
       char hch = (char)(~(1<<(7-bmBitOffset)));
       blockStr[bmCharOffset] = ch&hch;
       write_block(bmId,blockStr);
       delete[] blockStr;
   }
}

// The layout of disk should be like this:
// |<-sb->|<-free block bitmap->|<-inode table->|<-data->|
block_manager::block_manager()
{
  d = new disk();

  // format the disk
  sb.size = BLOCK_SIZE * BLOCK_NUM;
  sb.nblocks = BLOCK_NUM;
  sb.ninodes = INODE_NUM;

}

void
block_manager::read_block(uint32_t id, char *buf)
{
  d->read_block(id, buf);
}

void
block_manager::write_block(uint32_t id, const char *buf)
{
  d->write_block(id, buf);
}

// inode layer -----------------------------------------

inode_manager::inode_manager()
{
  bm = new block_manager();
  uint32_t root_dir = alloc_inode(extent_protocol::T_DIR);
  if (root_dir != 1) {
    printf("\tim: error! alloc first inode %d, should be 1\n", root_dir);
    exit(0);
  }
}

/* Create a new file.
 * Return its inum. */
uint32_t
inode_manager::alloc_inode(uint32_t type)
{
  /*
   * your lab1 code goes here.
   * note: the normal inode block should begin from the 2nd inode block.
   * the 1st is used for root_dir, see inode_manager::inode_manager().

   * if you get some heap memory, do not forget to free it.
   */

   for(uint32_t inum = 1;inum<INODE_NUM;inum++){
     struct inode *inode_p = get_inode(inum);
     if(inode_p==NULL){
        inode_p = (struct inode *)malloc(sizeof(struct inode));
        inode_p->type = type;
        put_inode(inum,inode_p);
        delete inode_p;
        return inum;
     }
   }
  return 1;
}

void
inode_manager::free_inode(uint32_t inum)
{
  /*
   * your lab1 code goes here.
   * note: you need to check if the inode is already a freed one;
   * if not, clear it, and remember to write back to disk.
   * do not forget to free memory if necessary.
   */
   struct inode *ino = get_inode(inum);
   if(ino==NULL) return;
   struct inode *blank_ino = (struct inode*)malloc(sizeof(struct inode));
   memset(ino, 0, sizeof(inode_t));
   ino->type = 0;
   put_inode(inum,ino);
	free(ino);
}


/* Return an inode structure by inum, NULL otherwise.
 * Caller should release the memory. */
struct inode*
inode_manager::get_inode(uint32_t inum)
{
  struct inode *ino, *ino_disk;
  char buf[BLOCK_SIZE];

  printf("\tim: get_inode %d\n", inum);

  if (inum < 0 || inum >= INODE_NUM) {
    printf("\tim: inum out of range\n");
    return NULL;
  }

  bm->read_block(IBLOCK(inum, bm->sb.nblocks), buf);
  // printf("%s:%d\n", __FILE__, __LINE__);

  ino_disk = (struct inode*)buf + inum%IPB;
  if (ino_disk->type == 0) {
    printf("\tim: inode not exist\n");
    return NULL;
  }

  ino = (struct inode*)malloc(sizeof(struct inode));

  *ino = *ino_disk;

  return ino;
}

void
inode_manager::put_inode(uint32_t inum, struct inode *ino)
{
  char buf[BLOCK_SIZE];
  struct inode *ino_disk;

  printf("\tim: put_inode %d\n", inum);
  if (ino == NULL)
    return;

  bm->read_block(IBLOCK(inum, bm->sb.nblocks), buf);
  ino_disk = (struct inode*)buf + inum%IPB;
  *ino_disk = *ino;
  bm->write_block(IBLOCK(inum, bm->sb.nblocks), buf);
}

#define MIN(a,b) ((a)<(b) ? (a) : (b))


/* Get all the data of a file by inum.
 * Return alloced data, should be freed by caller. */
void
inode_manager::read_file(uint32_t inum, char **buf_out, int *size)
{
  /*
   * your lab1 code goes here.
   * note: read blocks related to inode number inum,
   * and copy them to buf_out
   */
  //  struct inode *ino = get_inode(inum);
  //  if(ino==NULL) return;
  //  //file size
  //  if(size == NULL)
  //    size = (int *)malloc(sizeof(int));
  //  *size = ino->size;
  //  //printf("read 1nd block %d from inum %d\n",ino->blocks[0],inum);
   //
  //  int fileSize = ino->size;
  //  int blockSize = ino->size==0?0:((ino->size-1)/BLOCK_SIZE+1)*BLOCK_SIZE;
  //  //use as iterator
  //  blockid_t blockNum = 0;
  //  //the data has been load into buf_out
  //  unsigned int loadSize = 0;
   //
  //  //malloc buf_out
  //  //*buf_out = (char *)malloc(fileSize);
  //  *buf_out = (char *)malloc(blockSize);
   //
   //
  //  //ndirect blocks
  //  while(blockNum<NDIRECT&&loadSize<fileSize){
  //    char* blockBuf = (char *)malloc(BLOCK_SIZE);
  //    //find the position now
  //    char* outPos = *buf_out+(blockNum)*BLOCK_SIZE;
  //    bm->read_block(ino->blocks[blockNum],blockBuf);
  //    //bm->read_block(ino->blocks[blockNum],outPos);
  //    int readSize = MIN(BLOCK_SIZE,fileSize-loadSize);
  //    loadSize+=readSize;
  //    //store into out_buf
  //    memcpy(outPos, blockBuf, readSize);
  //    blockNum++;
  //    delete[] blockBuf;
  //  }
  //  //printf("read %s from inum %d\n",*buf_out,inum);
  //  if(loadSize==fileSize){
  //    ino->atime = time(NULL);
  //    put_inode(inum, ino);
  //    free(ino);
  //    return;
  //  }
   //
  //  blockid_t *IdirectBlockBuf = (blockid_t *)malloc(BLOCK_SIZE);
  //  bm->read_block(ino->blocks[blockNum],(char *)IdirectBlockBuf);
  //  blockNum = 0;
  //  while(blockNum<BLOCK_SIZE/sizeof(uint32_t)&&loadSize<fileSize){
  //    char* blockBuf = (char *)malloc(BLOCK_SIZE);
  //    //find the position now
  //    char* outPos = *buf_out+(blockNum+NDIRECT)*BLOCK_SIZE;
  //    bm->read_block(IdirectBlockBuf[blockNum],blockBuf);
  //    //bm->read_block(IdirectBlockBuf[blockNum],outPos);
  //    int readSize = MIN(BLOCK_SIZE,fileSize-loadSize);
  //    loadSize+=readSize;
  //    //store into out_buf
  //    memcpy(outPos, blockBuf, readSize);
  //    blockNum++;
  //    delete[] blockBuf;
  //  }
  //  //printf("read %s from inum %d\n",*buf_out,inum);
  //  ino->atime = time(NULL);
 // 	 put_inode(inum, ino);
 // 	 free(ino);

 char buf[BLOCK_SIZE];
 char IdirectBlockBuf[BLOCK_SIZE];

 // get inode information with inum from disk
 inode_t* inode = get_inode(inum);
 if (inode == NULL) {
   exit(0);
 }
 *size = inode->size;
 char* data_out = (char*)malloc(inode->size);	// free by caller
 *buf_out = data_out;	// bind buf_out with new malloc area
 memset(data_out, 0, inode->size);

 // judge whether need indirect block
 bool need_indirect = (inode->size > (NDIRECT * BLOCK_SIZE));
 uint32_t* indArr;
 if (need_indirect) {
   bm->read_block(inode->blocks[NDIRECT], IdirectBlockBuf);
   indArr = (uint32_t*)IdirectBlockBuf;
 }

 // read data to data_out
 uint32_t loadSize = 0;	// total read length
 uint32_t leftSize = inode->size; // reamin length to read
 // uint32_t oldBlockNum = inode->size / BLOCK_SIZE + 1;	// total blocks to read
 // if (inode->size % BLOCK_SIZE == 0) oldBlockNum -= 1;
 uint32_t blockNum = 0;	// now read block number
 uint32_t readSize = 0; // read length once time

 for(loadSize = 0; leftSize > 0; leftSize -= readSize, loadSize += readSize) {
   readSize = MIN(BLOCK_SIZE, leftSize);
   // for indirect case
   if (blockNum >= NDIRECT) {
     bm->read_block(indArr[blockNum-NDIRECT], buf);
     memcpy(data_out, buf, readSize);
     blockNum++;
     data_out += readSize;
   }
   // for direct case
   else {
     bm->read_block(inode->blocks[blockNum], buf);
     memcpy(data_out, buf, readSize);
     blockNum++;
     data_out += readSize;
   }
 }
 // change time
 inode->atime = time(NULL);
 put_inode(inum, inode);
 free(inode);
 return;
}

/* alloc/free blocks if needed */
void
inode_manager::write_file(uint32_t inum, const char *buf, int size)
{
  /*
   * your lab1 code goes here.
   * note: write buf to blocks of inode inum.
   * you need to consider the situation when the size of buf
   * is larger or smaller than the size of original inode
   */

	inode_t* ino = get_inode(inum);
	bool oldIndirect = ((ino->size/BLOCK_SIZE) > NDIRECT);
	uint32_t oldSize = ino->size;
	uint32_t oldBlockNum = (oldSize==0) ? 0 : (oldSize-1) / BLOCK_SIZE + 1;
	//if (oldSize % BLOCK_SIZE == 0) oldBlockNum -= 1;

	ino->size = MIN(MAXFILE *BLOCK_SIZE, (unsigned)size);

	char IdirectBlockBuf[BLOCK_SIZE];
	uint32_t* indArr;
	uint32_t newBlockSize = (ino->size==0) ? 0 : ino->size / BLOCK_SIZE + 1;

  //if (ino->size % BLOCK_SIZE == 0) total_blocks -= 1;
	bool needInd = (newBlockSize > NDIRECT);
	uint32_t leftSize = ino->size;

	uint32_t doneSize = 0, writeSize = 0;
	uint32_t blockNum = 0, newBlockNum = 0;
	char writeBuf[BLOCK_SIZE];


	// free the old indirect blocks
	if (oldIndirect) {
		uint32_t indBlock = ino->blocks[NDIRECT];
		char oldData[BLOCK_SIZE];
		bm->read_block(indBlock, oldData);
		uint32_t* oldIndArr = (uint32_t*)oldData;
		for (uint32_t i = 0; i < oldBlockNum - NDIRECT; i++)
			bm->free_block(oldIndArr[i]);
		bm->free_block(indBlock);
	}
	// free old direct block
	for (uint32_t i = 0; i < oldBlockNum && i < NDIRECT; i++)
		bm->free_block(ino->blocks[i]);

	// init indirect block
	if (needInd) {
		ino->blocks[NDIRECT] = bm->alloc_block();
		bm->read_block(ino->blocks[NDIRECT], IdirectBlockBuf);
		indArr = (uint32_t*)IdirectBlockBuf;
	}

	//begin write
	for (doneSize = 0; blockNum < newBlockSize; doneSize += writeSize, leftSize -= writeSize) {
		writeSize = MIN(leftSize, BLOCK_SIZE);
		// do NDIRECT
		if (blockNum < NDIRECT) {
			newBlockNum = bm->alloc_block();
			ino->blocks[blockNum] = newBlockNum;
		}
		// do NINDIRECT
		else {
			newBlockNum = bm->alloc_block();
			indArr[blockNum - NDIRECT] = newBlockNum;
			bm->write_block(ino->blocks[NDIRECT], IdirectBlockBuf);
		}

		memset(writeBuf, 0, BLOCK_SIZE);
		memcpy(writeBuf, buf, writeSize);
		bm->write_block(newBlockNum, writeBuf);
		buf += writeSize;
		blockNum++;
	}

	ino->ctime = time(NULL);
  ino->mtime = time(NULL);
	put_inode(inum, ino);
	free(ino);
  return;

}

void
inode_manager::getattr(uint32_t inum, extent_protocol::attr &a)
{
  /*
   * your lab1 code goes here.
   * note: get the attributes of inode inum.
   * you can refer to "struct attr" in extent_protocol.h
   */
   struct inode *ino = get_inode(inum);
   if(ino==NULL)
     return;
   a.type=(uint32_t)ino->type;
   a.size=ino->size;
   a.atime=ino->atime;
   a.mtime=ino->mtime;
   a.ctime=ino->ctime;
   return;
}

void
inode_manager::remove_file(uint32_t inum)
{
  /*
   * your lab1 code goes here
   * note: you need to consider about both the data block and inode of the file
   * do not forget to free memory if necessary.
   */
   struct inode *ino = get_inode(inum);
   if(inum==NULL)
     return;
   int blockNum = ino->size==0?0:(ino->size-1)/BLOCK_SIZE+1;

   for(int i=0;i<NDIRECT&&i<blockNum;i++){
     bm->free_block(ino->blocks[i]);
   }
   if(blockNum>NDIRECT){
     blockid_t *IdirectBlockBuf = (blockid_t *)malloc(BLOCK_SIZE);//NINDIRECT
     bm->read_block(ino->blocks[NDIRECT],(char *)IdirectBlockBuf);

     for(int i = 0;i<NINDIRECT;i++){
       bm->free_block(IdirectBlockBuf[i]);
     }
     delete []IdirectBlockBuf;
     bm->free_block(ino->blocks[NDIRECT]);
   }
   free_inode(inum);

}
